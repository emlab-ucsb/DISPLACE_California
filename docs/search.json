[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DISPLACE California documentation",
    "section": "",
    "text": "Introduction\nDISPLACE is an agent-based, spatially explicit bioeconomic modeling framework that represents individual fishing vessels as agents whose behavior is influenced by historical fishing behavior and spatial resource availability. The model captures how vessels adjust their fishing activity (i.e., when, where, what, and how to fish) in response to spatial, temporal, management, and economic constraints. The spatial domain of the model is represented by a network of nodes, where the extent is based on historical fishing locations. The model integrates three main modules (i.e., biological, fleet, and economic), which can be customized based on data availability. DISPLACE relies on fisheries-dependent data such as Vessel Monitoring Systems (VMS) and landing receipts to guide spatial fishing patterns, catch, and effort, resulting in realistic simulations of fishing behavior. The biological module includes species-specific life history traits and population dynamics, while the fleet and economic modules include vessel-specific characteristics (e.g., size, gear, fuel capacity) and economic parameters (e.g., fuel prices, ex-vessel values, labor costs). DISPLACE has the ability to model the redistribution of fishing effort at various disaggregated levels—from individual vessels to individual ports or individual gears— allowing for the assessment of distributional impacts of OSW development (@bastardie2014displace).\nWe used DISPLACE to evaluate the potential impacts of California’s Offshore Wind energy development lease areas on the DTS fisheries operating off the coast of California. This notebook summarizes the requirements, inputs, outputs, and processes for running DISPLACE and the associated R routines. Separate documentation about DISPLACE can be found on the project website.\nThis repository includes an application example based on our study. It does not use actual vessel or fisheries data, but rather example data that do not reflect any confidential fishing information. This allows for a complete test run of the parametrization and model, and provides an opportunity to become familiar with the processes and different model components.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#working-environment",
    "href": "index.html#working-environment",
    "title": "DISPLACE California documentation",
    "section": "Working environment",
    "text": "Working environment\nThe current project uses DISPLACE version 1.3.5 on Windows 11. You can download the installer here. The R routines run on R version 4.5.0 (on any platform or operating system). All required R packages are detailed in r/config.R.\nThe repository contains all the scripts required to prepare input data in the DISPLACE format, along with scripts for basic processing of outputs in the r and routines folders. It also includes example data in the raw_inputs folder, which serve as reference for data contents and structure when building a DISPLACE application.\nThe processed_inputs folder is initially empty and is automatically populated when running the routines with r/functions_routines.R. To explore DISPLACE results, you will need to manually move the model output files into the outputs folder so they can be read by r/functions_outputs.R.\nDISPLACE_California\n  |__ docs\n  |__ qmd\n  |__ raw_inputs\n  |__ processed_inputs\n  |__ outputs\n  |__ routines\n  |__ r",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#quick-setup-run",
    "href": "index.html#quick-setup-run",
    "title": "DISPLACE California documentation",
    "section": "Quick Setup & Run",
    "text": "Quick Setup & Run\nFor a quick execution and model run to test whether it can run on your machine, execute:\n\nsource(here::here(\"r/functions_routines.R\"))\n\nBefore executing, make sure to update the installer directory in the directory parameter of the generate_dis_run_files function in functions_routines.R. Running this script will populate the processed_inputs folder, whose contents then need to be moved to the machine where DISPLACE is run. This must be a Windows machine, and the inputs must be located in C:/. You should also create a folder named DISPLACE_outputs in C:/, where the outputs will be stored.\nWe recommend reviewing the entire repository to understand the inputs and processes in more detail before executing.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "spatial_extend.html",
    "href": "spatial_extend.html",
    "title": "1  Spatial extend",
    "section": "",
    "text": "1.1 Graph of nodes\nThe spatial domain of DISPLACE is represented by a network of nodes on which simulated vessels navigate and fish. The extent of this domain must be defined based on historical fishing effort and the harbors from which vessels operate. This section provides context on the inputs required to define the study’s spatial domain.\nThe DISPLACE project provides tutorials on using DISPLACE. Among them is a guide to setting up a new graph of nodes that explains step by step how to use the DISPLACE GUI to create the node graph, an input required by the R routines and the model.\nTo do so, at least two .shp files are required: one defining the area extent for simulating vessel behavior, and an inverted shape to prevent the generation of nodes outside the area of interest. Example files are provided in this repository under raw_inputs/GRAPH/shp as graph_area.shp and exclusion_area.shp. Using these, you can generate the graph of nodes, which is already available for this example application in raw_inputs/GRAPH as graph0.dat and its associated files.\nFor this study, we focus on the waters off the coast of California using a spatial domain that spans latitudinally from roughly the US/Mexico EEZ border to Cape Blanco (32.0° to 42.6°) and longitudinally from -125.1° to -117.3°. Nodes are 4 km apart (Figure 1.1).\nFigure 1.1: DISPLACE study area. The spatial extent for this study is determined by the spatial distribution of DTS vessel fishing effort, informed by the merged VMS-fish ticket dataset. This results in a latitudinal extent of 32.0° to 42.6°, and longitudinal extent of -125.1° to -117.3°. Nodes are 4 km apart, and the twelve ports depicted are those included in the simulations. OSW areas are shaded in grey.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial extend</span>"
    ]
  },
  {
    "objectID": "spatial_extend.html#harbors",
    "href": "spatial_extend.html#harbors",
    "title": "1  Spatial extend",
    "section": "1.2 Harbors",
    "text": "1.2 Harbors\nAs detailed in the graph of nodes tutorial the generated nodes of the stidy area (graph0.dat) need to be associated to the harbors from where the vessels operate in the simulation. Such, vessels need to be specified in the file GRAPH/harbours.dat, with the port name with no blank spaces, a port id and the latitude and lon coordinates as shown in Table 1.1.\n\n\n\n\nTable 1.1: Details of the harbour.dat file contents for this case study.\n\n\n\n\n\n\nport_name\nlon\nlat\nidx_port\n\n\n\n\nCrescent_City\n-124.2\n41.7\n1\n\n\nEureka\n-124.2\n40.8\n2\n\n\nFort_Bragg\n-123.8\n39.4\n3\n\n\nBodega_Bay\n-123.1\n38.3\n5\n\n\nSan_Francisco\n-122.4\n37.8\n4\n\n\nMoss_Landing\n-121.8\n36.8\n7\n\n\nMonterey\n-121.9\n36.6\n6\n\n\nMorro_Bay\n-120.9\n35.4\n8\n\n\nSanta_Barbara\n-119.7\n34.4\n10\n\n\nOxnard\n-119.2\n34.2\n9\n\n\nNewport_Beach\n-117.9\n33.6\n11\n\n\nOceanside\n-117.4\n33.2\n12\n\n\n\n\n\n\n\n\nThe final updated graph, with nodes connected to the ports of interest, has already been generated and is available at GRAPH/graph1.dat along with its associated files. This is the graph that will be used to run DISPLACE. Additionally, GRAPH/graph2.dat contains the updated graph that defines the lease areas closure scenario.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial extend</span>"
    ]
  },
  {
    "objectID": "populations.html",
    "href": "populations.html",
    "title": "2  Populations data",
    "section": "",
    "text": "2.1 Abundance inputs\nThis section includes a description of the raw input datasets and the parameters considered to run the R routines for the target species population characteristics. These files should be stored and loaded from raw_inputs/{project-name}/POPULATIONS.\nThere are four main inputs to explicitly characterize the stock populations: their biological traits, their abundances structured by size and age and their spatial distribution. Although not directly life-history parameters, stock price information is also provided in the same folder. Species can also be implicitly characterized in the model, where simulated fishing is not coupled with their simulated population dynamics, but rather defined by a constant catch rate, as explained in the fleet section. However, such implicit species still need to be included in the inputs to feed the routine code, and their parameters can be filled with dummy data.\nFor our case study, we focus on the DTS complex fisheries. We selected these species because they are the most important groundfish fisheries by volume for trips fishing within the lease areas. The DTS complex is composed of four species in the Pacific Groundfish Fishery, explicitly defined in this analysis:\nWe also included two implicitly modeled stocks, based on their significant and trackable landings within lease areas, as well as a broader “catch-all” group representing additional catch from our fleet of interest:\nBelow, we describe the contents of each required file to run our analysis.\nDISPLACE requires abundances (in thousands of individuals) within 14 size bins. These 14 bins are evenly spaced in length and are identical for all explicit species, despite their differences in body size. Abundances by size are provided in Stock_abundances_at_szgroup.csv. Alternatively, abundances can be specified in 13 age bins using Stock_abundances_at_age.csv. Both files must exist in the input directory. However, only one needs to contain actual data.\nThe size bins also define three broader size categories (small, medium, and large) which are relevant when specifying other input files such as spatial distribution and stock process files. In our case study, we grouped bins 0:5 as small, 6:9 as medium, and 10:13 as large.\nFor our case study, we define abundances by size group and therefore populate Stock_abundances_at_szgroup.csv. The age-based file, Stock_abundances_at_age.csv, is included but filled with zeros. Implicit species must be listed in both files, although can be filled with dummy data. In our example, we populate the implicit species’ abundance rows by repeating the values from the first explicit specie. This is required for the R routines to run. However, these repeated inputs are not used by the model and do not affect the results.\nThe number of fish at length defines the initial populations in the simulation. We obtained these values from the stock assessment estimates of number-at-length in the “natlen” table of the SS3 model output (Figure 2.2), and then adjusted them to fit the 14 size bins required by DISPLACE.\nFigure 2.2: The number of fish at length in 2010 by species.\nBecause the stock assessments represent populations across the entire U.S. West Coast, we scale the abundances to represent the proportion of the stock falling within waters off the coast of California. We determined the average percent of the population falling within California waters using the proportions in the bottom trawl survey data (@keller2017northwest). The annual percent of biomass observed in the survey is shown in Figure 2.3 below with the average from 2010-2018 highlighted. The values are as follows: Dover sole (52.3%), longspine thornyhead (72.5%), sablefish (53.7%), shortspine thornyhead (48.1%).\nFigure 2.3: The percent of each DTS species falling within California waters based on analysis of the West Coast Groundfish Bottom Trawl Survey with the average from 2010-2018 marked.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Populations data</span>"
    ]
  },
  {
    "objectID": "populations.html#biological-traits",
    "href": "populations.html#biological-traits",
    "title": "2  Populations data",
    "section": "2.2 Biological traits",
    "text": "2.2 Biological traits\nThis section describes the contents of the file Stock_biological_traits.csv and how we populated it for our case study. The file requires actual information only for the explicit species. Implicit species were also included but filled with dummy data, consistent with the approach used for the abundance files, to ensure the R routines can run.\nWe obtained the life history parameters from the most recent stock assessments available for each modeled species: the 2023 sablefish assessment (@johnson2023status), the 2021 Dover sole assessment (@wetzel2021status), the 2019 longspine thornyhead assessment (@adams2019catch), and the 2023 shortspine thornyhead assessment (@zahner2023status). These parameters were extracted directly from the Stock Synthesis output files using the r4ss package (@taylor2021beyond).\n\n2.2.1 Growth parameterization\nThe growth parameters included in Stock_biological_traits.csv are:\n\nLinf: von Bertalanffy asymptotic length.\nCV_Linf: coefficient of variation of the von Bertalanffy asymptotic length.\nK: Von Bertalanffy \\(K\\).\nt0: Theoretical age of the von Bertalanffy growth function (VBGF) at which fish would have a size of zero.\n\nDISPLACE expects growth to be specified using a three-parameter von Bertalanffy growth function (VBGF): \\[\nL_t = L_\\infty \\left(1 - e^{-K\\,(t - t_0)}\\right)\n\\]\nwhere \\(L_t\\) is the length at age \\(t\\), \\(L_\\infty\\) is the average asymptotic length, \\(K\\) is the growth coefficient, and \\(t_0\\) is the hypothetical age at which length is zero.\nHowever, many stock assessments specify growth using the five-parameter Schnute parameterization (here shown in the \\(b=1\\) special case commonly used in assessments):\n\\[\nL_t = L_1 + (L_2 - L_1)\\;\n\\frac{1 - e^{-K\\,(t - A_1)}}{1 - e^{-K\\,(A_2 - A_1)}}\n\\]\nwhere \\(A_1\\) is the age at length \\(L_1\\), \\(A_2\\) is the age at length \\(L_2\\), and \\(K\\) is the growth coefficient. Although assessment reports often do not list the three VBGF parameters explicitly, they are provided in the model output files and can also be derived from the Schnute parameters using:\n\\[\nL_\\infty = L_2 - \\frac{L_1\\, e^{-K\\,(A_2 - A_1)}}{1 - e^{-K\\,(A_2 - A_1)}}\n\\]\n\\[\nt_0 = A_1 + \\frac{1}{K}\\,\n\\log\\!\\left(\\frac{L_2 - L_1}{L_2 - L_1\\, e^{-K\\,(A_2 - A_1)}}\\right)\n\\]\nDISPLACE also requires the CV of \\(L_\\infty\\). Because growth is specified via the Schnute form in the assessments, this CV is not reported directly. Stock assessments typically record (1) the CV of length-at-age for old fish and (2) the maximum CV of length-at-age (which usually occurs among older ages). We use the CV of length-at-age for old fish as a proxy for \\(CV(L_\\infty)\\) when it is valid (non-negative). In the few cases where that value was negative (e.g., longspine thornyhead; Dover sole—males), we substitute the maximum CV of length-at-age.\nWe provide both sets of parameters in Table 2.1 below.\n\n\n\n\nTable 2.1: Growth parameters for the study species\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nSex\nA1_yr\nA2_yr\nL1_cm\nL2_cm\nt0\nk\nLinf_cm\nCV_Linf\n\n\n\n\nSablefish\nMales\n0.5\n30\n26.62\n56.11\n-1.19\n0.381\n56.11\n0.078\n\n\nSablefish\nFemales\n0.5\n30\n25.26\n61.13\n-0.95\n0.367\n61.13\n0.103\n\n\nSablefish\nAverage\nNA\nNA\nNA\nNA\n-1.07\n0.374\n58.62\n0.091\n\n\nDover sole\nMales\n1.0\n60\n10.35\n41.97\n-1.06\n0.138\n41.97\n0.078\n\n\nDover sole\nFemales\n1.0\n60\n7.99\n48.05\n-0.38\n0.132\n48.05\n0.080\n\n\nDover sole\nAverage\nNA\nNA\nNA\nNA\n-0.72\n0.135\n45.01\n0.027\n\n\nLongspine thornyhead\nMales\n3.0\n40\n8.57\n27.83\n-0.34\n0.109\n28.18\n0.054\n\n\nLongspine thornyhead\nFemales\n3.0\n40\n8.57\n27.83\n-0.34\n0.109\n28.18\n0.054\n\n\nLongspine thornyhead\nAverage\nNA\nNA\nNA\nNA\n-0.34\n0.109\n28.18\n0.054\n\n\nShortspine thornyhead\nMales\n2.0\n100\n9.17\n66.07\n-5.12\n0.017\n79.68\n0.109\n\n\nShortspine thornyhead\nFemales\n2.0\n100\n11.38\n73.61\n-8.70\n0.010\n111.59\n0.109\n\n\nShortspine thornyhead\nAverage\nNA\nNA\nNA\nNA\n-6.91\n0.013\n95.64\n0.109\n\n\n\n\n\n\n\n\nThe growth relationships are visualized in Figure 2.4 below.\n\n\n\n\n\n\n\n\nFigure 2.4: The von Bertalanffy growth relationship for each species.\n\n\n\n\n\n\n\n2.2.2 Length-weight relationship\nDISPLACE requires a length–weight relationship. The parameters included in Stock_biological_traits.csv are:\n\na: Weight-length relationship coefficient.\nb: Weight-length relationship exponent.\n\nWe extracted the parameters for the following standard form from the stock assessment output files:\n\\[\nW = a L^b\n\\]\nwhere \\(W\\) is weight at length \\(L\\), and \\(a\\) and \\(b\\) are the parameters of the exponential relationship. The parameters are listed in Table 2.2. These values convert length (cm) to weight (kg). Length–weight parameters are input in cm–g, and within the R routines they are transformed to cm–kg. To convert length in centimeters to weight in grams, as required in DISPLACE, the parameter \\(a\\) is multiplied by 1000.\n\n\n\n\nTable 2.2: Length-weight parameters for each species.\n\n\n\n\n\n\nSpecies\nSex\na\nb\n\n\n\n\nSablefish\nMales\n3.4e-06\n3.2701\n\n\nSablefish\nFemales\n3.3e-06\n3.2726\n\n\nSablefish\nAverage\n3.3e-06\n3.2714\n\n\nDover sole\nMales\n2.6e-06\n3.3710\n\n\nDover sole\nFemales\n3.0e-06\n3.3320\n\n\nDover sole\nAverage\n2.8e-06\n3.3515\n\n\nLongspine thornyhead\nMales\n4.3e-06\n3.3520\n\n\nLongspine thornyhead\nFemales\n4.3e-06\n3.3520\n\n\nLongspine thornyhead\nAverage\n4.3e-06\n3.3520\n\n\nShortspine thornyhead\nMales\n5.0e-06\n3.2500\n\n\nShortspine thornyhead\nFemales\n4.9e-06\n3.2600\n\n\nShortspine thornyhead\nAverage\n4.9e-06\n3.2550\n\n\n\n\n\n\n\n\nThe length-weight relationships are visualized in Figure 2.5 below.\n\n\n\n\n\n\n\n\nFigure 2.5: The von Bertalanffy growth relationship for each species.\n\n\n\n\n\n\n\n2.2.3 Maturity\nThe maturity parameters included in Stock_biological_traits.csv are:\n\nL50: Length 50% mature.\nmat_B: slope of maturity ogive.\nmat_cat: This corresponds to the size DISPLACE category at the L50. Given 0:13 size bins if sz_bin_cm is 6 cm, and L50 is 55 cm, then mat_cat will be 8.\n\nDISPLACE uses a logistic maturity ogive to specify maturity at length, defined as:\n\\[\nP_{mat} = \\frac{1}{1 + e^{-B\\,(L - L_{50})}}\n\\]\nwhere \\(P_{mat}\\) is the proportion of individuals that are mature at length \\(L\\), \\(L_{50}\\) is the length at which 50% of individuals are mature, and \\(B\\) is the slope of the maturity ogive.\nWe extracted both parameters directly from the stock assessment output files. The values are reported in Table 2.3.\n\n\n\n\nTable 2.3: Parameters for the maturity ogive for each species.\n\n\n\n\n\n\nSpecies\nL50_cm\nB\n\n\n\n\nSablefish\n55.190\n-0.4210\n\n\nDover sole\n32.840\n-0.2780\n\n\nLongspine thornyhead\n17.826\n-1.7900\n\n\nShortspine thornyhead\n31.425\n-0.1773\n\n\n\n\n\n\n\n\nThe maturity ogives are visualized in Figure 2.6 below.\n\n\n\n\n\n\n\n\nFigure 2.6: The maturity ogive for each species. The vertical dotted line indicates the length at which 50% of individuals are mature (L50).\n\n\n\n\n\n\n\n2.2.4 Recruitment parameters\nRecruitment can be defined in DISPLACE using the Ricker recruitment model, Beverton–Holt (B&H), or a fixed recruitment.\nTo define fixed recruitment, see the files within raw_inputs/POPULATIONS/SSB_R_parameters, which include an example of the required format and content. For example, in the input file for population 0 (e.g., 0spe_SSB_R_parameters_biolsce1.dat), there are three rows corresponding to recruits (in thousands), default value of 0, and the recruitment code type used by DISPLACE. Recruitment codes are 0 = Ricker, 1 = Beverton–Holt, and 2 = Fixed.\nWhile fixed recruitment must be specified manually, for Ricker and B&H, the .dat files are generated automatically within the R routine GeneratePopulationsFeatures.R. To update to Ricker or B&H, set the value of the object recruit_method to the corresponding code number in that script. For the dynamic recruitment, three variables must be defined in Stock_biological_traits.csv:\n\nalpha and beta: Parameters for the Ricker or B&H models\n\nCV_recru: Coefficient of variation in recruitment\n\nThe updated {sp_code}spe_SSB_R_parameters_biolsce.dat file for dynamic recruitment (in the processed inputs) will include four rows corresponding to alpha, beta, CV_recru and the recruitment type code.\nOther recruitment related paramenters are:\n\nr_age: Age of recruitment. This variable is used to dispatch overall recruits into the size bins.\nssb_assessment: This variable is not used but it is included as a reference. It corresponds to the total weight of the sexually mature part of a fish population in mT.\n\nFor our case study, we will specify the stock–recruitment relationship using a Beverton–Holt parameterization. However the stock assessments assume the steepness form:\n\\[\nR = \\frac{R_0 \\, h \\, SSB}{SSB_0 \\, (1 - h) + (5h - 1)\\, SSB}\n\\]\nwhere recruitment (\\(R\\)) is a function of the unfished recruitment level (\\(R_0\\)), steepness (\\(h\\)), which is the proportion of unfished recruitment produced when the spawning biomass is at 20% of the unfished level, the unfished spawning stock biomass (\\(SSB_0\\)), and the current spawning stock biomass (\\(SSB\\)).\nIn contrast, the Beverton–Holt parameterization is:\n\\[\nR = \\frac{a \\, SSB}{1 + b \\, SSB}\n\\]\nwhere \\(a\\) sets the initial slope of the recruitment curve and \\(b\\) controls the strength of density dependence.\nThe Beverton–Holt parameters can be directly converted from the steepness parameters using:\n\\[\na = \\frac{4h R_0}{SSB_0 (1 - h)}\n\\]\n\\[\nb = \\frac{5h - 1}{SSB_0 (1 - h)}\n\\]\nWe used the \\(SSB_0\\) estimate directly from the stock assessments, except for shortspine thornyhead. For this specie, the assessments estimate spawners in terms of eggs rather than biomass.\nDISPLACE also requires a CV to describe variability around the stock–recruitment relationship. We derived this from the fixed \\(\\sigma_R\\) parameter (the process variability standard deviation of log-normal recruitment deviations) assumed in each stock assessment. We converted \\(\\sigma_R\\) to a CV of arithmetic recruitment as:\n\\[\nCV = \\sqrt{e^{\\sigma^2} - 1}\n\\]\nThe parameters for both stock–recruitment parameterizations are reported in Table 2.4.\n\n\n\n\nTable 2.4: Stock recruitment parameters for each species. Age = age at recruitment into the population and CV = coefficient of variation around the stock-recruit relationship.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nR0\nh\nSSB0\nBH_a\nBH_b\nCV\nAge_yr\n\n\n\n\nSablefish\n19453.8\n0.70\n186534.0\n0.973400\n0.0000447\n2.470\n0.5\n\n\nDover sole\n213096.4\n0.80\n294070.0\n11.594300\n0.0000510\n0.361\n1.0\n\n\nShortspine thornyhead\n12580.2\n0.72\n103727.4\n1.247466\n0.0000895\n0.533\n2.0\n\n\nLongspine thornyhead\n136530.0\n0.60\n39134.0\n20.932700\n0.0001278\n0.658\n1.0\n\n\n\n\n\n\n\n\nThe stock recruitment relationships are visualized in Figure 2.7 below.\n\n\n\n\n\n\n\n\nFigure 2.7: The stock-recruit relationship for each species. Note that the parameters in Table S8 and used in the analysis are for 1000s of recruits and metric tons of biomass; axes are scaled to millions of recruits and 1000s of metric tons of spawners for visual ease.\n\n\n\n\n\n\n\n2.2.5 Natural mortality\nThe natural mortality rates, defined as nat_M in Stock_biological_traits.csv, are extracted from each assessment and provided in Table 2.5 below.\n\n\n\n\nTable 2.5: Natural mortality rate of each species.\n\n\n\n\n\n\nSpecies\nSex\nM\nTmax_yr\n\n\n\n\nSablefish\nMales\n0.0592\n70\n\n\nSablefish\nFemales\n0.0711\n70\n\n\nSablefish\nAverage\n0.0652\n70\n\n\nDover sole\nMales\n0.1140\n60\n\n\nDover sole\nFemales\n0.1080\n60\n\n\nDover sole\nAverage\n0.1110\n60\n\n\nLongspine thornyhead\nMales\n0.1113\n80\n\n\nLongspine thornyhead\nFemales\n0.1113\n80\n\n\nLongspine thornyhead\nAverage\n0.1113\n80\n\n\nShortspine thornyhead\nMales\n0.0400\n100\n\n\nShortspine thornyhead\nFemales\n0.0400\n100\n\n\nShortspine thornyhead\nAverage\n0.0400\n100\n\n\n\n\n\n\n\n\n\n\n2.2.6 Management parameters\nThe fishery management parameters included in Stock_biological_traits.csv are:\n\nFMSY: Fishing mortality rate that produces the maximum sustainable yield. This value is also given to F_target.\nB_trigger: The biomass trigger is a reference point that initiates specific management actions when the biomass of a fish stock falls below or exceeds a certain threshold. This value is expressed as a percentage. For our study case, there is no trigger leading to specific management actions, so we set it to 0. This does not affect the analysis (B_trigger = 0).\nmls and mls_cat: minimum landing size (the smallest legal size at which a fish can be caught, kept, and sold) and the corresponding DISPLACE size category (i.e., following the same categorization used for mat_cat). In our study case, there is no minimum individual size for DTS, so both values are set to 0.\ntac_tons: Total Allowable Catch. It represents the maximum quantity of fish that can be legally harvested from a particular fishery over a specified period. For the U.S. fisheries management system this parameter corresponds to the Annual Catch Limit (ACL). We can get ACL from the Groundfish biennial harvest specifications and management measures of the Pacific Fishery Management Council.\nTAC_percent: This variable represents the maximum allowed change in TAC from one year to the next. In other words, TAC in year $year_{y+1} $ cannot differ by more than \\(XX\\%\\) of TAC in year $year_y $. Here we used the ACL values from above, we calculate an average year-to-year change. Values within Stock_biological_traits.csv are expressed in per one. (This value is also applied to F_percent).\nfbar_assessment: Average annual fishing mortality, calculated as the mean F across a range of ages (fully exploited age classes). In our case, we used the fishing mortality rate, which some assessments refer to as relative fishing intensity. If fishing mortality was not provided, we alternatively used exploitation rates. Exploitation rate is a closely related concept—it expresses a proportion rather than a rate. When data were presented as a time series, we averaged across our validation period to obtain the estimate of interest.\nfbar_age_min and fbar_age_max: these refer to the minimum and maximum ages used to calculate the mean fishing mortality rate (fbar_assessment). These correspond to the youngest and oldest age classes included in the calculation. As a proxy we used the range of ages selected by the fishery based on gear selectivity.\n\n\n\n2.2.7 SizeSpectra option parameters\nThe following parameters can be ignored by setting them to 0 if we are not considering trophic interactions (@blanchard2017sizespectra): Winf, k, etha_m, kappa, q, n and fzeroest. We can account for trophic interactions by enabling the sizeSpectra option.\n\n\n2.2.8 Additional variables\nStock_biological_traits.csv includes the following additional variables:\n\nUseIt: values Yes/No, indicating whether it is considered in the analysis or not.\nunit_sizebin: Defines the size unit for bins. For example, 1 = cm, 0.1 = mm, etc. The same units are applied in the abundance-by-size-class files.\nstock: code of the population. For our study case this corresponds to the FAO code.\nspecies: Species scientific name. This is included just as a reference and it is not considered within the routines.\nSource_Biology and Source_Stock: references from where the values are taken. These are included just as a reference and are not considered within the routines.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Populations data</span>"
    ]
  },
  {
    "objectID": "populations.html#species-distribution",
    "href": "populations.html#species-distribution",
    "title": "2  Populations data",
    "section": "2.3 Species distribution",
    "text": "2.3 Species distribution\nPopulation distribution inputs need to be located in POPULATIONS/SpatialLayers to run DISPLACE. The R routines can interpret biomass density on any unit and at a continuous scale. For our case study we use species distribution data from @liu2023species (Figure 2.8).\nThese inputs need to be provided in .shp format. For our case study, we clipped the spatial density of the species to a grid of interest and exported it as a shapefile. In addition to the geometry information of each polygon (i.e., the square cells in our grid), the abundance or biomass density must be specified in a variable named GRIDCODE, which is then read by the routines as shown in Table 2.6.\n\n\n\n\nTable 2.6: Example of the structure of the shapefile containing the species distributioin values\n\n\n\n\n\n\nGRIDCODE\ngeometry\n\n\n\n\n424.3856\nPOLYGON ((-119.35 32.05, -1…\n\n\n386.2080\nPOLYGON ((-119.25 32.05, -1…\n\n\n353.0033\nPOLYGON ((-119.15 32.05, -1…\n\n\n\n\n\n\n\n\nWe can also specify disaggregated spatial distribution inputs by size group (i.e., large, medium, or small) each defined using a set of the 14 size bins employed by DISPLACE. The division of size groups can be tailored to each analysis, but it must remain consistent throughout a same DISPLACE application.\nTo be correctly read and interpreted by the R routines, the naming format of these files must follow the structure:\ncontour{sp_code_number}_{size_group}_{size_bins_considered}\nFor example, for Sablefish (SAB), corresponding in our analysis to species code 0, the input files would be: contour0_large_10-11-12-13, contour0_medium_6-7-8-9, contour0_small_0-1-2-3-4-5.\nAll three files must be provided for each species. However, since we lack spatial distribution data by size group, in our case all three files contain the same information.\n\n\n\n\n\n\n\n\nFigure 2.8: Population distribution of our four species of interest along the West Coast, with biomass values expressed in kg/km2.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Populations data</span>"
    ]
  },
  {
    "objectID": "populations.html#stock-prices-data",
    "href": "populations.html#stock-prices-data",
    "title": "2  Populations data",
    "section": "2.4 Stock prices data",
    "text": "2.4 Stock prices data\nThe file Stock_prices_data.csv contains prices per kilogram for three length categories,small, medium, and large, in any currency unit (USD in our case study).\nFor our case study, we do not have price information by length, so we apply the same price across all length categories for each species. To calculate stock prices, we determine the average price per kilogram for each species based on the landing receipts over the entire time series (Table 2.7).\n\n\n\n\nTable 2.7: Stock_prices_data.csv input file contects\n\n\n\n\n\n\nstock\nsmall\nmedium\nlarge\n\n\n\n\nSAB\n7.698486\n7.698486\n7.698486\n\n\nMIP\n1.714999\n1.714999\n1.714999\n\n\nSJZ\n3.911902\n3.911902\n3.911902\n\n\nSJU\n12.458488\n12.458488\n12.458488\n\n\nEOJ\n2.813573\n2.813573\n2.813573\n\n\nSGO\n2.311579\n2.311579\n2.311579\n\n\nOTH\n7.500386\n7.500386\n7.500386",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Populations data</span>"
    ]
  },
  {
    "objectID": "fisheries.html",
    "href": "fisheries.html",
    "title": "3  Fleet data",
    "section": "",
    "text": "3.1 Fishing effort distribution\nThis section describes the raw input datasets and parameters used to run the R routines related to fleet characteristics. These include information on individual fishing vessels, gears, métiers, vessel economics, and related aspects. The files should be stored and loaded from raw_inputs/FISHERIES. Most of the information can be derived from available VMS, landing receipts, vessel registry data, and stock assessments.\nDISPLACE requires spatial object inputs defining fishing effort distributions. These can be provided at different levels of aggregation, ranging from overall fleet-wide fishing effort to distributions by port of operation, by métier, or even by individual vessels. The more disaggregated the inputs, the more accurately DISPLACE can emulate the fleet and vessel behaviour.\nThese files must be available in .shp format within FISHERIES/SpatialLayers, and their names must match those specified in the name_gis_file_for_fishing_effort_per_polygon variable from vessels_specifications_per_harbour_metiers.csv, as detailed in the following section. Fishing effort values can be defined either in absolute terms (using any unit) or as relative values. However, since DISPLACE outputs express effort as cumulative fishing time, we recommend transforming input effort values to that unit to enable direct comparison.\nFor our case study, we used vessel-specific fishing effort distributions by métier. Thus, if a vessel operated with more than one gear, we provided a separate spatial file of associated fishing effort for each métier for that vessel.\nThe figure below shows the overall input fishing distribution for our fleet, along with examples of individual inputs used in this analysis.\nFigure 3.1: Fishing effort distribution input examples. The left panel shows overall fishing effort, expressed as total hours summed across the entire fleet (all vessels considered in this study). The center and right panels illustrate fishing effort for vessel USA0028 and its associated métiers. Input data are provided on a continuous scale in DISPLACE but have been discretized here for visualization purposes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fleet data</span>"
    ]
  },
  {
    "objectID": "fisheries.html#vessels-specifications",
    "href": "fisheries.html#vessels-specifications",
    "title": "3  Fleet data",
    "section": "3.2 Vessels specifications",
    "text": "3.2 Vessels specifications\nIn this study, we focused on vessels participating in the DTS fishery off the coast of California (hereafter DTS vessels).\nThe DISPLACE input file containing information for each of the vessels included is in vessels_specifications_per_harbour_metiers.csv. Information can also be inputed by group of vessels. Each individual or grouped vessel characteristics are disagregated by harbor and metier (i.e., each vessel could be repeated in more than observation in this table if it belongs to more than one metier or lands in different ports). Métier is defined as a combination of gear and target species or fisheries that are distinctly defined. For our case study we included 12 ports and five metiers.\nThe variables included in this dataset are detailed below:\n\nVesselId: This variable corresponds to the vessel ID. It may be represented with a VMS ID, IMO number, or any other identifier used to distinguish individual vessels or groups of vessels. In DISPLACE, vessel IDs follow a specific nomenclature consisting of the country code followed by a numeric code (e.g., USA0001, USA0002, etc.), which allows disaggregating DISPLACE outputs from the GUI by country fleet.\nnb_vessels: This is the number of vessels represented by a unique ID. If we have information on all vessels available, this will have a value of 1. If we have limited information at an individual vessel level or want to simplify the analysis, we can group several vessels under the same ID and characteristics and specify here the number of vessels in each group.\nPort: This is the port from where the vessels operate. If a vessel operates in more than one port, we should create two distinct observations for that vessel, distinguishing between one harbor and another.\ndcf_gear and Gear: Both variables contain the same métier names. This redundancy comes from legacy versions of the R routines. The métier names included here will be consistent across all analyses and inputs, and they condition other inputs such as decision trees or the disaggregation of outputs. As with harbour, the dataset should contain different rows for the same vessel when it operates under different métiers.\nRelativeEffort: Defines the share of fishing effort exerted by a vessel or group of vessels for a given métier and/or port grouping. When a vessel appears in multiple rows of the dataset (e.g., across different métiers or ports), its effort is distributed across those rows, and the values must sum to 1. The proportional contribution for each row is calculated as the ratio of time at sea for that métier and/or port to the vessel’s total time at sea.\nname_gis_file_for_fishing_effort_per_polygon: This variable specifies the name of the .shp file from which the fishing effort distribution information is read.\nname_gis_layer_field: parameter defining the variable in .shp expressing fishing effort, in our case fe. The units are not important since it can be interpreted in relative terms depending on what we specify in variable is_gis_layer_field_relative_numbers.\nis_gis_layer_field_relative_numbers: Indicates whether the effort variable represents relative values. The default is FALSE. If relative values are available, you can still use the R routines designed for absolute values by adjusting the GIS layer to reflect relative importance on a linear scale. For example, if some areas are 100 times more likely to be visited than others, assign a value of 1 to the less frequented polygon and 100 to the more frequented one.\nxfold_gis_layer_field: Default value 1.\n{population code}_kg_h: Defines the catching capacity per fishing hour of a vessel or group of vessels for each population included in the analysis. Each population has its own variable. For example, our analysis includes SAB_kg_h, SJU_kg_h, SJZ_kg_h, MIP_kg_h, EOJ_kg_h, SGO_kg_h, and OTH_kg_h.\nThis variable is used in the simulation to define the fishing rate and to determine how much time is required to fill each vessel’s storage capacity. For explicitly defined species, these rates adapt to the simulated abundances provided by the population model. Since implicit stocks are not dynamically modeled, their catch is only represented using fixed catch rates derived from historical data.\nVE_LEN and Tonnage: These parameters correspond to vessel length (m) and vessel tonnage (any unit).Tonnage values are not used as DISPLACE inputs, but included as a references. However, as for our case study we use tonnage values to extrapolate other parameters such as engine power or fuel tank capacity. Neither the VMS nor fish ticket data contain much information on vessel characteristics. To obtain such information, in our study we have web scraped information from the USCG Port State Information Exchange website and the NOAA limited entry dataset.\nmean_kW: Mean engine power of the vessel. This variable influences the fuel consumption of simulated trips. In our case study, engine power values were only available for a few vessels. To estimate engine power for the rest, we used registry data from 2,043 vessels and predicted engine power from tonnage and length using a model we developed.\nkW: Represents the same information as mean_kW. If we lack engine power data and we recorded as 0 or NA, the script 06_GenerateVesselsConfigFiles.r will assign a value based on the model DanishkWvsLOAModel.Rdata instead, used in other DISPLACE applications by Bastardie et al.\nfishing.speed.knots and cruise.speed.knots: Average speed when the vessel is fishing and average speed when the vessel is steaming. We got these values from the VMS data by discriminating fishing pings from the rest. This values were adjusted for calibrating the model as discussed in the calibration section.\nfuel.tank.liter: Fuel tank capacity of the vessel. This parameter is important because it influences trip duration. A half-empty fuel tank will trigger the vessel to return to port. Other reasons for returning to port include a full fish hold or reaching the end of the day if the vessel is set to perform daily trips (i.e., when trip duration is set to &lt;30h).\nIn our case study, vessel-specific fuel tank capacities were not available for our vessels of interest. Instead, we built a model from a limited dataset to infer tank capacity based on vessel length. Alternatively, the case example in this repository provides a model to calculate tank capacity as a function of length using the nonlinear regression model DanishFuelTankCapModel.Rdata, which has been applied in other DISPLACE applications by Bastardie et al, and it is already integrated within 06_GenerateVesselsConfigFiles.r.\nfuel.cons.h: Fuel consumption per hour. Like fuel.tank.liter, this parameter is critical because it determines trip duration, fuel availability, and the variable costs of a trip.\nFor this parameter, we use the consumption expression from @bastardie2013integrating. It is already implemented within 06_GenerateVesselsConfigFiles.r, where a linear model is built using data from IBM_datainput_engine_consumption.txt. This expression defines fuel consumption per hour based on engine power (kW). Consumption is adjusted within the simulation using multipliers for different operational phases.\nOperational phase multipliers: Multipliers applied to fuel consumption per hour depending on the phase of a trip, since fuel use varies across different activities.\n\nmultip.fuel.steaming: Adjusts fuel consumption when the vessel is steaming, i.e., traveling to or from fishing grounds.\n\nmultip.fuel.fishing: Adjusts fuel consumption when the vessel is actively fishing. Consumption can vary depending on gear type and fishing method.\n\nmultip.fuel.ret.port.fish: Adjusts fuel consumption when the vessel is returning to port with its catch. Extra weight from the catch can slightly increase fuel use.\n\nmultip.fuel.inactive: Adjusts fuel consumption when the vessel is inactive (e.g., docked at port, anchored, or for gillnetters setting nets at very low speeds).\n\nIn the absence of specific information, all multipliers can be set to 1. For our case study, we use the values from @bastardie2013integrating: Fishing: 1; Steaming: 0.8; Inactive: 0.1. For returning to port with catch, we use 1.1, as applied in other DISPLACE analyses from the Bastardie repository, to reflect slightly higher consumption when carrying landed fish.\nave.storage.fish.kg: Fish storage capacity of the vessel. This defines another trigger for when a vessel must return to port, once no more fish can be stored the trip ends.\nStorage capacity can be defined as the highest observed historical catch for a given vessel, creating an artificial ceiling for total potential catches. However, actual storage capacity in weight may vary across trips depending on catch volume and other conditions. For this reason, using the maximum observed value across all trips in the time series may not always be ideal. Due this, the storage capacity variable was also adjusted during the calibration process, as described later.\nnb_pings_per_trip: Defines the frequency of changing fishing grounds within a trip. This value can be 1 or higher. If greater than 1, the vessel may shift between several fishing grounds instead of remaining in a single node. This behavior also depends on the use of a Change Fishing Ground Decision Tree, which sets the probabilities for moving to other grounds. If the value is 1, the vessel will fish only in a single node and will not switch grounds, reducing navigation time and concentrating all fishing pressure for that particular simulated trip within that node. In our case study, we use a value of 1. However, an example decision tree file is provided in the repository: dtrees/ChangeGround_VME.dt.csv.\ntrip.duration.h: Average trip duration per métier. This parameter affects the time at sea in the simulation. While maximum trip duration could be used instead to test effects or for calibration purposes, this was not applied in our study. When calculating, we group only by vesselid (not by port or gear), assuming that trip duration reflects the vessel’s overall capacity regardless of the type of fishing activity.\nGamma_shape and Gamma_scale: Parameters used to draw the resting time in port between consecutive trips. In our DISPLACE application, these parameters are not used directly because a GoFishing decision tree defines this behavior. Nevertheless, we must still populate them, so we include the default values from other DISPLACE applications (Bastardie et al.): 0.4485 and 336.7618, respectively. These values are ignored if the GoFishing decision tree is active.\nweekEndStartDay, weekEndEndDay, WorkHoursStart, WorkHoursEnd: Variables that can be used along the stopFishing decision tree if such a tree is provided in the dtree folder and activated in the processed_inputs/simusspe scenario .dat file.\nIf no decision tree is used, return-to-port events are instead triggered by conditions such as a half-empty fuel tank, full fish storage, or the end of a daily trip. In this case, trip duration can be flexible, potentially lasting more than a week and not following a regular weekly pattern. If applied, weekdays are represented by numbers 1 to 7, and hours by numbers 1 to 24.\nvessel_range_km: Vessel range in kilometers, defining how far a vessel can travel. In the R routines, this parameter determines which nodes are accessible to a vessel from a given port; nodes outside that range cannot be visited.\nWe calculate this by taking the maximum distance traveled across all trips and dividing it by 2 to account for the round-trip distance. Alternatively, it could be estimated as the straight-line distance from the farthest point on a trip to the port, or as the mean distance traveled per trip. Due to dependencies in the R routines, any value above 4,500 km will yield an error.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fleet data</span>"
    ]
  },
  {
    "objectID": "fisheries.html#economic-data",
    "href": "fisheries.html#economic-data",
    "title": "3  Fleet data",
    "section": "3.3 Economic data",
    "text": "3.3 Economic data\nDISPLACE includes a wide range of economic parameters that can be used to more accurately estimate the profitability, and cost efficiency of each vessel. Besides stock prices already described in the population section, DISPLACE requires to inform vessel-specific economic parameters and fuel prices.\n\n3.3.1 Fuel prices\nFuel price values in currency unit per liter, need to be hardcoded in the 06_GenerateVesselsConfigFiles.r and 12_GenerateHarboursFiles.r routines and must be updated for each analysis if different estimates are used. These values remain fixed across the simulated time series. They can be defined by vessel size (if different fuel types apply to different vessel classes) or assigned differently by port, in which case the R routines would need to be modified accordingly.\nFor our case study, fuel prices were obtained from the Fisheries Economics Data Program (PSMFC 2025). Since fuel price values and trends are consistent across ports, we applied a uniform price across all primary ports included in our study based on the data for the primary ports available in the fuel dataset. For our analysis, we assigned the same average fuel price across all ports and vessels from 2010 to 2023, converted from dollars per gallon to dollars per liter. These prices reflect the values at the time they were collected, so we adjusted them for inflation to 2023 using the priceR package. The inflation-adjusted average price was $4.47 per gallon, or $1.18 per liter. These prices are reported before tax. The same dataset references a 8.5% fuel tax applied in Eureka in 2011. We use this value as our reference, since other tax information refers to periods prior to 2010. Applying this tax results in a final fuel cost of $1.28 per liter, which we use to represent the fuel-related cost in the model.\n\n\n\n\n\n\n\n\nFigure 3.2: Fuel prices time series of ports of interest for which there is information (USD/gallon).\n\n\n\n\n\n\n\n3.3.2 Vessel-specific economic variables\nDISPLACE requires specific vessel-level economic variables to individually characterize the economic features that define each vessel’s fishing operations. This information must be provided in two files: fisheries_economics_variables.csv and STECF/Economics_fs.csv. The contents of both files are identical. This redundancy exists due to legacy versions of the routines. Both files must be present for the routines to generate the proper DISPLACE inputs.\nFor our case study, most economic values are derived from @steiner2021evaluating and accessed through the Fisheries Economics Explorer (FISHEyE), part of NOAA’s Economic Data Collection (EDC). Revenue and cost data are inflation-adjusted to 2023 (@steiner2021evaluating). The EDC dataset is aggregated at a relatively coarse level, limiting the ability to get individual vessel characteristics or detailed group-level information. Nonetheless, it provides average estimates by broader categories. For our study, we use the following available aggregation categories: economic metrics by available ports of interest (i.e., Crescent City, Eureka, Fort Bragg, San Francisco, and Morro Bay/Monterey), vessel size categories (i.e., less than 60 ft, between 60 and 80 ft, and greater than 80 ft), and fishery type (i.e., groundfish using trawl gear, and groundfish fixed gear vessels with a trawl endorsement). We then match these economic metrics to individual vessels in our dataset according to their operating ports, metier, and vessel size categories. When vessel specifications can’t be matched to any category, we use average values.\nThe variables required in fisheries_economics_variables.csv and STECF/Economics_fs.csv are:\n\nNb_crew: This variable correspoind to the number of crew working in the vessel, it has implications for the selection of other variables, such as labor or crew payments (e.g., variable crewshare_and_unpaid_labour_costs_percent).\nAnnual_other_income: This represents any income not related to fishing, in cases where fishing is a part-time activity, or when selling fishing rights (e.g., Individual Transferable Quotas). In our case, we will set this value to 0, assuming that all vessels generate revenue solely from fishing. This value must be indicated on any give currency for the entire vessel not by crew member.\nLanding_costs_percent: Percentage of landing costs associated with taxes, if any, on income from landings, which may be collected by the port or the state. In California, landing fees are paid by buyers or intermediaries rather than by fishers (CDFW 2025). Therefore, for this analysis the value is set to 0.\nCrewshare_and_unpaid_labour_costs_percent: This represents the percentage share of landing income that goes to the crew. In @vastenhoud2023economic, this corresponds to the sum of personnel costs and the value of unpaid labor.\nThis variable represents labor costs as a share of GVA, and it is used to define there economic parameters in DISPLACE within Vessel.cpp:\n\nFor gross profit we’re subtracting all labor compensation, whether paid or unpaid, from GVA to get the owner’s profit. So we need to include both actual payments and the imputed labor value.\n\nGrossProfit = (GVA*(100.0-crewshare_and_unpaid_labour_costs_percent)/100.0)\n\nFor labour surplus we are trying to isolate the value assigned to labor, so again we need the total labor cost, not just what’s paid to the crew.\n\nLabourSurplus = (GVA * crewshare_and_unpaid_labour_costs_percent/100.0) - ((annual_insurance_costs_per_crew * (double)tstep / 8761) * this_vessel_nb_crew) - LabourOpportunityCosts\n\nBreak-Even Revenue needs complete labor costs to properly assess what portion of revenue is needed to cover all expenses.\n\nBER = ((other_annual_fixed_costs * (double)tstep / 8761) + CapitalOpportunityCosts + (vessel_value * ((100.0 - annual_depreciation_rate) / 100.0) * (double)tstep / 8761) / (1 - (((GVA * crewshare_and_unpaid_labour_costs_percent / 100.0) + TotFuelCosts + TotVarCosts) / TotLandingIncome);\n\nFor our case study, we use the variable labor from FISHEyE which captures the total cost of labor. This includes both paid crew wages and the imputed value of labor provided by owner-operators, thus representing the full economic cost of labor, regardless of whether it is paid out or retained by the vessel owner acting as crew.\nWith this we define:  \n\\[\nCrewshare\\_and\\_unpaid\\_labour\\_costs\\_percent = \\dfrac{labor}{GVA} \\times 100\n\\]\n\nOther_variable_costs_per_unit_effort: This variable represents other variable costs beyond fuel and labor. It should be expressed per unit of effort. In @vastenhoud2023economic, this is calculated as (Other variable costs + Repair & maintenance costs) / (Days at sea × 24 hours). In Vessel.cpp, this defines TotVarCosts, which is used to calculate both BER (as detailed above) and GVA:\n\n\nGVA = (TotLandingIncome+(annual_other_income* (double)tstep/8761) - TotFuelCosts - TotVarCosts - (other_annual_fixed_costs* (double)tstep/8761)\n\nFor our case study we use:\n\\[\nOther\\_variable\\_costs\\_per\\_unit\\_effort =\n(all\\_variable\\_costs - fuel - labor) / avg\\_yearly\\_hours\\_at\\_sea\n\\]\n\nAnnual_insurance_costs_per_crew: Despite the name, which could be misleading refering exclusively to insurance cost per crew member (excluding vessel insurance), this variable also encompasses other mandatory labor-related expenses that employers must pay regardless of profitability. These may include employer-paid payroll taxes, unemployment insurance, and similar costs. It is used solely to compute labor surplus.\nFor our case study, this value is set to 0, as these additional labor-related costs are incorporated into other fixed cost categories, based on the equivalent FISHEYE variable.\nOther_annual_fixed_costs: consistent with how it is used in Vessel.cpp (i.e. to calculate GVA and BER) this variable corresponds to all fixed costs.\nVessel_value: This variable represents the vessel’s initial value. In FISHEyE, we have both the vessel market value and the vessel replacement value. Since the DISPLACE variable is intended to capture the vessel’s starting asset value, we will use the replacement value, as it excludes depreciation and more accurately reflects the original investment cost.\nThis is supported by its use in calculating the Capital Opportunity Costs, as implemented in Vessel.cpp, where we want to reflect the full capital invested before depreciation.\n\n\nCapitalOpportunityCosts = (vessel_value * opportunity_interest_rate/100.0) * (double)tstep/8761\n\n\nStandard_labour_hour_opportunity_costs: A labour hour’s opportunity cost is what a worker or an economy gives up to use that hour in a specific way. @vastenhoud2023economic uses hourly labour costs for Denmark. For our case study, the hourly opportunity costs are based on estimates from the Employer Costs for Employee Compensation reported by the Bureau of Labor Statistics (BLS, 2024). According to the latest report, the average employer cost for private industry workers on the West Coast is $52.84 per hour. This value is entered per crew member, not aggregated or adjusted to the entire crew. This is used to define the labour oportunity costs in Vessel.cpp:\n\n\nLabourOpportunityCosts = standard_labour_hour_opportunity_costs * this_vessel_nb_crew * TotHoursAtSea\n\n\nstandard_annual_full_time_employement_hours: We define standard annual full-time employment as a maximum of 40 hours per week, totaling 2,080 hours per year (i.e., 52 weeks × 40 hours). This value is also entered per crew member, not aggregated or adjusted to the entire crew.\nAnnual_depreciation_rate: This represents the annual depreciation rate of the vessel’s initial value, and does not apply to other equipment, as implemented in Vessel.cpp:\n\n\nNetProfit = GrossProfit - CapitalOpportunityCosts - (vessel_value * (1-((100.0-annual_depreciation_rate)/100.0) * (double)tstep/8761)\n\n\nRoFTA = (NetProfit + CapitalOpportunityCosts) / (vessel_value* ((100.0-annual_depreciation_rate)/100.0)*((double)tstep/8761)\n\nFor the vessel’s annual depreciation rate, we follow @kitts2020techno, which applies a depreciation rate of 4% for vessels less than 25 years old. This value is also adopted in the NOAA Fisheries Best Practices for Measuring the Economic Performance of Fishing Businesses report (@kitts2022noaa), and also used in a different fishery context by @vastenhoud2023economic.\n\nOpportunity_interest_rate: This variable is used to calculate the Capital Opportunity Costs. We define the opportunity interest rate using Moody’s BAA corporate bond rate as a reference (@lian2012west; @kitts2022noaa). BAA-rated corporate bond yields have fluctuated over the past decades and are currently above 6%. However, we adopt a 5% rate to maintain consistency with prior fisheries economic assessments.\nAnnual_discount_rate: In 2023 the U.S. Office of Management and Budget (OMB) recommended a 3% rate for evaluating public investments or projects with intergenerational impacts. @horsch2023discounting discuss a broader range of discount rates and note that NOAA and other trustees have commonly used a 3% rate in similar contexts. @feist2025mapping, however, applied a 5.2% discount rate when evaluating fisheries economic activity from 2011 to 2020. This same 5.2% rate is also used to discount future economic activity from fisheries when calculating the present value of total economic output. For consistency with @feist2025mapping, we adopt a 5.2% discount rate in this analysis.\n\n\n\n3.3.3 Selectivity\nDISPLACE requires selectivity data, provided in the file fishing_gear_selectivity_ogives_per_stock.csv. This file contains the selectivity of each gear for each species by size bin, extracted from the respective stock assessments.\nFor our case study, we extracted fishing selectivity at length, defined as selectivity multiplied by retention, from the stock assessment model outputs (Table 3.1; Figure 3.3). We used the selectivity estimated for the most recent time block and adjusted the corresponding lengths to match the DISPLACE size bins.\n\n\n\n\nTable 3.1: Fleet selectivity used for each DTS métier.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nTrawl\nLongline\nTrap\nOther\n\n\n\n\nDover sole\nCA fisheries\nCA fisheries\n(no retention allowed)\nCA fisheries\n\n\nLongspine thornyhead\nAll fisheries\nAll fisheries\n(no retention allowed)\nAll fisheries\n\n\nSablefish\nTrawl\nFixed gear\nFixed gear\nFixed gear\n\n\nShortspine thornyhead\nCA trawl\nCA trawl\n(no retention allowed)\nCA trawl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.3: Selectivity in the most recent time block by species, fleet, and sex. Selectivity is defined here as selectivity times retention.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fleet data</span>"
    ]
  },
  {
    "objectID": "routines.html",
    "href": "routines.html",
    "title": "4  R routines",
    "section": "",
    "text": "DISPLACE requires input files in a specific format for the modeling framework to read them correctly. The previous sections described the contents and structure of the raw inputs, which must then be transformed to meet these requirements. In this section, we walk through the R routines needed to adapt the inputs.\nThe required DISPLACE inputs depend on the type of analysis being performed and the model modules being used. While other DISPLACE applications make use of additional routines to prepare such inputs (see the complete routines repository from François et al.), here we only include those relevant to our case study. These are divided into two main groups: routines for preparing data for the populations model and routines for preparing data for the fleet model. Additional routines are included to prepare the remaining data needed to run DISPLACE.\nIn this repository, the routines are located in the routines folder, and the code to execute them sequentially can be found in r/functions_routines.R. Here we use R 4.5.0, and the packages included in r/config.R. Be aware that as describerd in some of the previous sections, some model inputs are hardcoded within this routines, so modify the code as needed for your case study.\nRoutines for the population inputs located in raw_inputs/POPULATIONS are:\n\n01_GeneratePopulationsFeatures.R\n\n02_GeneratePopulationsConfigFiles.R\n\n03_RunPopulationsConfigFiles.R\n\n04_GeneratePopulationsPreferencesPerSpeciesMatrix.R\n\n05_GeneratePopulationsVariousFiles.R\n\nRoutines for the fleet inputs in raw_inputs/FISHERIES are:\n\n06_GenerateVesselsConfigFiles.R\n\n07_RunVesselsConfigFiles.R\n\n08_GenerateVesselsEconomicsFile.R\n\n09_GenerateOtherCatchesOnNodes.R\n\n10_GenerateMetiersSelectivityPerStockFiles.R\n\n11_GenerateMetiersVariousFiles.R\n\nThe routine 09_GenerateOtherCatchesOnNodes.R assigns additional fixed catches to the nodes beyond those of our modeled fleet. For instance, if other nations or fleets not explicitly characterized in the model exert fishing pressure on the populations defined in the analysis, the catch from these can be indicated in the file OTHER/othercatchespercountry.csv as fixed removals (in tonnes per year). While recruits are proportionally assigned based on coverage and density from SDM inputs, this routine assigns other catches evenly across the species’ coverage area, without accounting for species density. The routine can, however, be updated to weight other catches according to species distribution.\nAdditional routines required to run DISPLACE are:\n\n12_GenerateHarboursFiles.R: Prepares harbour files, including stock prices and fuel prices. Currently, the routine assigns the same prices across all ports, but it can be updated to reflect port-specific prices.\n13_GenerateShippingFiles.R: Although we do not use this module (which models traffic lanes used by other vessels that might influence fishing vessel behavior), DISPLACE still requires two files with dummy data in the raw_inputs/SHIPPING folder and corresponding processed inputs, so the model can run even without using this feature.\n14_GenerateFishfarmsFiles.R: Similarly, fish farm locations and features (defined by coordinates and size) can be included to condition vessel navigation and fishing. For this case study, we use dummy data in raw_inputs/FISHFARMS to allow DISPLACE to run, though this feature is not used in the analysis.\n15_GenerateWindmillsFiles.R: Allows input of specific turbine distributions or single turbine positions. Dummy data are included in raw_inputs/WINDMILLS for this case study.\n16_GenerateFirmsFiles.R: We do not use the firms feature. The input file in raw_inputs/FIRMS is populated with dummy data solely to satisfy DISPLACE requirements.\n17_GenerateSimulationsConfigFiles.R: An important step, as it generates all files required to inform DISPLACE about the parameterization, characteristics, and inputs needed to execute a run. These files are stored in processed_inputs/simusspe_california_example after running all routines.\n18_GenerateBenthosLandscapeOnNodes.R: DISPLACE includes an optional benthic module designed to evaluate fishing impacts on benthic habitats. This module is deactivated in our project, and the file in raw_inputs/HABITATS is filled with dummy data solely to prevent DISPLACE from crashing.\n\nThe execution of r/functions_routines.R runs these routines sequentially and generates the contents of the processed_inputs folder (initially empty in this repository). To create its contents, simply execute this script.\n\nsource(here::here(\"r/functions_routines.R\"))\n\nIn addition to running the routines, functions_routines.R also:\n\nUpdates config.dat to indicate the implicitly defined species.\n\nUpdates the baseline.dat file to set the baseline scenario using the closer_port feature, ensuring vessels return to the closest port among those historically fished (as part of our case study parametrization; this may differ depending on the application of DISPLACE).\n\nThe script also includes the function generate_dis_run_files, which defines the .bat and .dsf files needed to run DISPLACE without using the GUI. This function allows the user to specify:\n\nThe base directory for outputs.\n\nThe scenario being run.\n\nThe replicate name\nThe number of replicates.\nThe number of years analyzed.\nThe number of years for which data are stored. By default, DISPLACE only saves 1 year of VMS-like data, but it can be set to save 7 or 10 years of simulated data.\n\nThe number of threads to run the model, depending on the machine’s cores.\n\nOnce all processed inputs are generated (this can be done in Windows, macOS, or Linux using R), DISPLACE can be run from a Windows machine either via the GUI or by double-clicking the generated .bat file.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R routines</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "5  Results",
    "section": "",
    "text": "5.1 Read output files\nThis section presents the preliminary outputs of our case study using actual data (not available in this repository), rather than those generated from the example dataset. The example data cannot be used for testing and discussing validation and optimization since it does not reflect real conditions, consists of mock data, and does not include replicates. However, we provide the code required to generate such outputs, which can be adapted by users to their own VMS and landing receipt data.\nHere, we present results for model validation as well as results from our case study exploring the impact of offshore wind development lease areas.\nThe following functions in r/functions_validations.R read and preprocess DISPLACE output files, whether or not the analysis includes replicates:\nloglike_dis_baseline_output &lt;- generate_loglike_dis_baseline_output(\n      displace_outputs_path, # Path where outputs are stored\n      table_spp, # Table of species incldued in the analysis available in raw_inputs/POPULATIONS\n      implicit_ssp = c(\"EOJ\", \"SGO\", \"OTH\") # Implicit species code\n    )\nfe_dis_baseline_output_sf &lt;- generate_fe_dis_baseline_output(displace_outputs_path) # Path where outputs are stored\npopstats_dis_baseline_output &lt;- generate_popstats_dis_baseline_output(\n      displace_outputs_path, # Path where outputs are stored\n      pop_names # pop_names.txt content from raw_inputs/POPULATIONS\n    )",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#read-output-files",
    "href": "results.html#read-output-files",
    "title": "5  Results",
    "section": "",
    "text": "Process loglike files (logbook-like) that emulate landing receipt data:\n\n\n\nProcess spatial fishing effort output files:\n\n\n\nProcess population model output files:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#model-validation",
    "href": "results.html#model-validation",
    "title": "5  Results",
    "section": "5.2 Model validation",
    "text": "5.2 Model validation\nWe conducted a hindcasting exercise by running 30 replicates of the DISPLACE model over a 14-year historical period, using inputs representative of that timespan. Using the outputs of these simulations, we assessed model performance by comparing simulated outputs with observed metrics derived from the merged dataset.\n\n5.2.1 Fleet model validation\nWe assess model performance in predicting aggregate fishing effort (hours), catch, and number of trips across the full analysis period.\nAs shown in Table 5.1, for our case study, fishing time is slightly underpredicted (−5.9%), while total catch and number of trips closely match observations (+1.0% and 0.2%, respectively). In contrast, the model overestimates time at sea (+21%) and total distance traveled (+61%).\nTo reproduce this table, adapt the summary_report_table function in r/functions_validations.R to your data.\n\ngenerate_summary_report_table(\n        loglike_dis_baseline_output, # Processed loglike outputs\n        filtered_vmstix_data # Merged VMS and landing receipt data\n        )\n\n\n\n\n\nTable 5.1: Comparison of simulated and observed metrics with 95% confidence intervals (30 replicates). Values indicate the total over the 14-year hindcasting period.\n\n\n\n\n\n\nMetric\nObserved\nSimulated\nDifference….\n\n\n\n\nFishing time (h)\n593,050\n557,916 ± 3,728\n-5.9 ± 0.6\n\n\nTotal catch (mt)\n84,466\n85,296 ± 348\n1.0 ± 0.4\n\n\nNumber of trips\n39,115\n39,195 ± 62\n0.2 ± 0.2\n\n\nTime at sea (h)\n826,557\n1,001,390 ± 4,179\n21.2 ± 0.5\n\n\nDistance traveled (km)\n5,016,851\n8,079,615 ± 16,945\n61.0 ± 0.3\n\n\n\n\n\n\n\n\nWe can also visually inspect differences between simulated and observed spatial distributions. To do so, adapt the fe_displace_maps_rule3_report_figures function to your data.\n\ngenerate_fe_displace_map_report_figures(\n  fe_dis_baseline_output_sf, # Processed spatial fishing effort output file\n  vms_cumtime_leaseblock_vessel, # Observed spatial fishing effort input data\n  blocks_shore_eez_file, # Grid file to which you want to clip the data (raw_data/GRAHP/shp/spatial_grid)\n  rule_3 = TRUE, # Activate to hide cells with less than 3 vessels\n  mask_3rule, # Layer to clip out  rule3 cells \n  closure_areas_file, # Closure area file path\n  filtered_matched_vmstix # VMS resulting from merging the VMS and landing receipt data\n)\n\nUsing our case study data, the simulation reproduces the main patterns of fishing activity along the California coast, with high-effort areas in Northern and Central California aligning well with observed VMS data. Some discrepancies remain, particularly offshore and along parts of the central and northern coast, where effort is underpredicted.\nOver the 14-year validation period, the model captures the broad spatial structure of accumulated fishing effort, supporting its use for scenario analysis (Figure 5.1). However, it underpredicts effort within the OSW lease areas—by 70% in Humboldt and 47% in Morro Bay (Table 5.2, Figure 5.2, Figure 5.3). While absolute magnitudes may be off, projections remain informative for comparing relative trends across scenarios, the goal of our analysis.\n\n\n\n\n\n\n\n\nFigure 5.1: Comparison of the observed and simulated cumulative DTS fleet fishing effort for fourteen years representing the historical period 2010-2023, averaging each cell across replicates. The left and middle panels display spatially explicit observed and simulated fishing effort (hours). The right panel shows the difference between scenarios, where the scale limits are set to the Q1 and Q99 percentiles (−944 h and 394 h, respectively) to exclude outliers. The full distribution of differences is shown alongside the map. OSW development areas are outlined in blue. Information is rule of three compliant: at least three vessels operated in each cell displayed.\n\n\n\n\n\n\n\n\n\nTable 5.2: Comparison of observed and simulated fishing effort within the OSW development areas (30 replicates). Percent of total effort occurring within each lease area is shown in parentheses.\n\n\n\n\n\n\n\n\n\n\n\n\nLease.area\nObserved.fishing.time..h.\nSimulated.fishing.time..h.\nDifference….\n\n\n\n\nHumboldt\n9,726 (1.64%)\n2,944 ± 74 (0.69 ± 0.02%)\n-69.7 ± 0.8%\n\n\nMorro Bay\n1,432 (0.24%)\n760 ± 61 (0.18 ± 0.01%)\n-46.9 ± 4.3%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.2: Comparison of the observed and simulated cumulative DTS fleet fishing effort for fourteen years representing the historical period 2010-2023, averaging across replicates, for the Humboldt region. The left and middle panels display spatially explicit observed and simulated fishing effort (hours). The right panel shows the difference between scenarios, where the scale limits are set to the Q1 and Q99 percentiles (−944 h and 394 h, respectively) to exclude outliers. OSW development areas are outlined in blue. Information is rule of three compliant: at least three vessels operated in each cell displayed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.3: Comparison of the observed and simulated cumulative DTS fleet fishing effort for fourteen years representing the historical period 2010-2023, averaging across replicates, for the Morro Bay region. The left and middle panels display spatially explicit observed and simulated fishing effort (hours). The right panel shows the difference between scenarios, where the scale limits are set to the Q1 and Q99 percentiles (−944 h and 394 h, respectively) to exclude outliers. OSW development areas are outlined in blue. Information is rule of three compliant: at least three vessels operated in each cell displayed.\n\n\n\n\n\nWe can evaluate the model performance by comparing simulated total fishing effort (hours) and landings (metric tonnes) with observed values for each single vessel using generate_vessels_level_fit_plots_report_figures function.\n\ngenerate_vessels_level_fit_plots_report_figures(\n  loglike_dis_baseline_output, # Processed loglike outputs\n  filtered_matched_vmstix, # VMS resulting from merging the VMS and landing receipt data\n  filtered_tix_data_from_merge, # Landing receipt data resulting from merging the VMS and landing receipt data\n  vessels_id_mapping # Mapping dataframe original vessel ids with those from DISPLACE\n)\n\nResults show reasonable alignment in fishing effort across the fleet (Figure 5.4, a), with most points near the 1:1 line (R² = 0.63). The model tends to underestimate effort for the highest-effort vessels and slightly overestimate at the low end. Simulated landings match observed landings closely (Figure 5.4, b), with strong performance (R² = 0.90). Most points fall near the 1:1 line, indicating the model effectively captures the magnitude and distribution of landings across vessels.\n\n\n\n\n\n\n\n\nFigure 5.4: Comparison of observed and simulated cumulative effort at sea (a) and landings (b) for the 14-year validation period representing 2010-2023, averaged across replicates. Both axes are plotted on a log scale. The solid line is a linear regression (a: R2 = 0.63 for effort; R2 = 0.901 for landings). The dashed line represents the 1:1 line. Blue shading indicates point density. Information is rule of three compliant: each cell displayed contains at least three vessels.\n\n\n\n\n\nWe can also assess the fit of aggregated landings by target species by comparing simulated and observed values using the generate_overall_landings_fit_plot_report_figures function.\n\ngenerate_overall_landings_fit_plot_report_figures(\n  loglike_dis_baseline_output, # Processed loglike outputs\n  filtered_tix_data_from_merge, # Landing receipt data resulting from merging the VMS and landing receipt data\n  explicit_sp = c('sablefish', 'dover', 'thornyhead')\n) \n\nDisaggregating by species shows good overall agreement between simulated and observed total landings (Figure 5.5, R² = 0.78). However, the model tends to overestimate implicitly defined groups (chilipepper rockfish, petrale sole, “other”) and underestimate explicitly defined DTS species, reflecting differences in population parameterization and pointing to areas for future refinement.\n\n\n\n\n\n\n\n\nFigure 5.5: Comparison of simulated and observed cumulative landings for the seven stocks for the 14-year validation period representing 2010-2023 (median across replicates). Each point represents a stock (with 5%-95% percentile lines), where circles represent explicitly modeled stocks and triangles represent implicitly modeled stocks. The dashed line represents the 1:1 line. The solid line is a trend line (R2 is 0.777). Both axes are plotted on a log scale.\n\n\n\n\n\n\n\n5.2.2 Population model validation\nTo assess the biological model’s performance, compare simulated SSB outputs to those from the stock assessments. Adapt the generate_ssb_fit_plot function to check this.\n\ngenerate_ssb_fit_plot(\n      stock_assessment_data_folder, # Folder where SSB stock assessment data is located\n      popstats_dis_baseline_output$agg_pop_stats_year_sim # Processed popstats outputs\n    )\n\nHere we compared estimates of spawning stock biomass (SSB) from 2010-2023 from the stock assessments with the SSB time series generated through the 14 year DISPLACE simulation (Figure 5.6). We found that the initial SSBs in DISPLACE closely mirrored those of the assessment. Small differences arise due to the large differences in the length bins implemented in DISPLACE compared to those assumed in the stock assessments. DISPLACE uses 13 evenly sized length bins that are identical across all four species despite their differences in size. On the other hand, the stock assessments assume much more resolved length bins (1 to 2 cm) with maximum lengths tailored for each species. This leads to differences in the resolution of the numbers at length, the weight at length, and the maturity at length, leading to differences in the calculation of SSB.\nAlthough these initial differences are small, they amplify as the population grows through the coarse DISPLACE length bins. As a result, we judged this comparison to not be useful validation of the biological model. The fact that the DISPLACE simulations generate the right amount of catches from the right amount of effort is a better validation of the performance of the biological model.\n\n\n\n\n\n\n\n\nFigure 5.6: The spawning stock biomass estimates reported in the stock assessments from 2010-2020 compared to the spawning biomass estimates generated through the validation simulation. Both axes are plotted on a log scale.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]